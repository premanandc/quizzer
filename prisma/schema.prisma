// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts     Account[]
  sessions     Session[]
  quizAttempts QuizAttempt[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  questions    QuizQuestion[]
  quizAttempts QuizAttempt[]
  
  @@map("quizzes")
}

model QuizQuestion {
  id           String      @id @default(cuid())
  quizId       String
  questionText String
  questionType QuestionType
  orderIndex   Int
  
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options QuizOption[]
  answers UserAnswer[]
  
  @@map("quiz_questions")
}

model QuizOption {
  id         String  @id @default(cuid())
  questionId String
  optionText String
  isCorrect  Boolean @default(false)
  explanation String?
  orderIndex Int
  
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]
  
  @@map("quiz_options")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  totalQuestions Int
  startedAt   DateTime @default(now())
  completedAt DateTime?
  timeSpent   Int      @default(0) // in seconds
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers UserAnswer[]
  
  @@map("quiz_attempts")
}

model UserAnswer {
  id        String @id @default(cuid())
  attemptId String
  questionId String
  optionId  String
  
  attempt  QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   QuizOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  @@unique([attemptId, questionId, optionId])
  @@map("user_answers")
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}
